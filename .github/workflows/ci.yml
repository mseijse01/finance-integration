name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup NLTK data
      run: |
        python -c "import nltk; nltk.download('vader_lexicon', quiet=True)"
    
    - name: Code formatting check with Black
      run: |
        black --check --diff .
      continue-on-error: true  # Don't fail the build, just show the diff
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Test constants and basic imports
      run: |
        # Test our new constants and basic functionality
        python -c "from utils.constants import CacheTTL; print('✅ Constants imported successfully')"
        python -c "import app; print('✅ App imports successfully')"
        python -m pytest tests/test_constants.py tests/test_extraction.py tests/test_transformation.py tests/test_utils.py -v
      env:
        ALPHA_VANTAGE_API_KEY: "test_key"
        FINNHUB_API_KEY: "test_key"
        DATABASE_URL: "sqlite:///:memory:"

  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    
    - name: Install safety
      run: pip install safety
    
    - name: Check for security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: safety-report.json

  dockerfile-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: dockerfile
        failure-threshold: warning 